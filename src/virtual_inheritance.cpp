#include <iostream>

class Base {
  public:
    Base() { std::cout << "Base(default) constructor" << std::endl; }
    Base(int a) { std::cout << "Base(int) constructor" << std::endl; }
};

class D1 : virtual Base {
  public:
    // The complete object constructor
    D1(int d) : Base(d) { std::cout << "D1(int) constructor" << std::endl; }

    // "The base object constructor" will be generated by complier automatically when virtual is used in inheritance
    // D1(int d) : /*Base(d)*/ { std::cout << "D1(int) constructor" << std::endl; }
};

class D2 : virtual Base {
  public:
    D2(int d) : Base(d) { std::cout << "D2(int) constructor" << std::endl; }
};

class C : public D1, public D2 {
  public:
  // "The base object constructor" will be used in derived class, and virtual base class MUST be constructed in here
  // The compiler will use the default constructor of Base if not explicit declare the Base constructor in derived class constructor.
    C(int c) : D1(c), D2(c) { std::cout << "C(int) constructor" << std::endl; }

    std::string print() { return "hello"; }
};

void test_virtualInheritance() {
    C cc(1);
    std::cout << cc.print() << std::endl;
}